window.addEventListener("load", () => {
});

window.addEventListener("resize", () => {
	if (window.innerWidth > 1200 && $(".catalog-sidebar.active").length) {
		hideCatalogSidebar();
	}
	execProductFixed()
	mobileSalonsAdressSlider();
});

window.addEventListener("scroll", () => {
	execProductFixed()
});

document.addEventListener("DOMContentLoaded", function () {
	// * Create instance of scroller button
	if (document.querySelectorAll(".filter-status__buttons").length) {
		const scroller = new scrollerButton(".filter-status__buttons");
	}

	// * Only number input
	$(document).on("input keyup paste", "[data-numeric]", function () {
		$(this).val($(this).val().replace(/\D/, ""));
	});

	// * Убирает подсветку ошибок
	$(document).on("focus", ".validate-error", function () {
		$(".validate-error").removeClass("validate-error");
		$(".error").remove();
	});

	$("[data-phone]").inputmask({
		mask: "+7 (999) 999-99-99",
		showMaskOnHover: false,
		placeholder: "_",
	});

	// * При фокусе инпута подсказка поднимается
	$(document).on("focus", ".custom-input", function () {
		$(this).addClass("custom-input_active");
	});

	// * При потере фокуса инпута подсказка опускается, если значение пустое  остается, если значение имеется
	$(document).on("blur", ".custom-input", function () {
		const elem = $(this);
		if (elem.val()) return;
		elem.removeClass("custom-input_active");
	});

	tippy("[data-services-tooltip-content]", {
		content: (e) => e.getAttribute("data-services-tooltip-content"),
		placement: "right",
		arrow: false,
		onShow(instance) {
			const domElement = instance.popper;
			domElement.classList.add("modal-services__tooltip_wrapper");
		},
	});

	// * Create instance of header bottom menu dropdowns
	const headerMenu = new headerMenuDropdowns();

	// let Scrollbar = window.Scrollbar;
	// console.log(Scrollbar);
	// Scrollbar.init(document.querySelector(".salons-info__wrap"), {
	// 	alwaysShowTracks: true,
	// });

	document.querySelectorAll(".custom-select").forEach((select) => {
		const selectInstance = new InitCustomSelect(select);
	});

	// * fCN = filter ClassNames
	const fCN = {
		filterItemHiddenClass: "filter-item_hidden",
		filterItemVisibleClass: "filter-item_visible",
		filterAdvancedClass: "filter-main_advanced",
		filterSimpleClass: "filter-main_simple",
		getElement: function (className) {
			return "." + className;
		},
	};

	// * Toggle filter mode
	$(".filter-advanced").on("click", function () {
		const element = $(this);
		const filterWrap = element.closest(".filter");
		const filterMain = filterWrap.find(".filter-form");
		const filterText = filterWrap.find(".filter-advanced__text");

		if (filterMain.hasClass(fCN.filterSimpleClass)) {
			filterText.text("Простой поиск");
			filterMain
				.removeClass(fCN.filterSimpleClass)
				.addClass(fCN.filterAdvancedClass);
			filterWrap
				.find(fCN.getElement(fCN.filterItemHiddenClass))
				.addClass(fCN.filterItemVisibleClass)
				.removeClass(fCN.filterItemHiddenClass);
		} else if (filterMain.hasClass(fCN.filterAdvancedClass)) {
			filterText.text("Расширенный поиск");
			filterMain
				.removeClass(fCN.filterAdvancedClass)
				.addClass(fCN.filterSimpleClass);
			filterWrap
				.find(fCN.getElement(fCN.filterItemVisibleClass))
				.addClass(fCN.filterItemHiddenClass)
				.removeClass(fCN.filterItemVisibleClass);
		}
	});

	// * Toggle hidden text
	$(".show-hidden__text").on("click", function () {
		const element = $(this);
		const parent = element.parent();

		const params = {
			hiddenTextClass: "hidden__text",
			visibleTextClass: "visible__text",
			convertToSelector(className) {
				return "." + className;
			},
		};

		if (parent.find(params.convertToSelector(params.hiddenTextClass)).length) {
			parent
				.find(params.convertToSelector(params.hiddenTextClass))
				.addClass(params.visibleTextClass)
				.removeClass(params.hiddenTextClass);
			element.text("Скрыть текст");
		} else if (
			parent.find(params.convertToSelector(params.visibleTextClass)).length
		) {
			parent
				.find(params.convertToSelector(params.visibleTextClass))
				.addClass(params.hiddenTextClass)
				.removeClass(params.visibleTextClass);
			element.text("Читать полностью");
		}
	});

	// * Toggle header top contact dropdown
	$(".header-top__dropdown").on("click", function () {
		toggleHeaderTopDropdown();
	});

	// * Header catalog params object
	const hCatalog = {
		element: $(".header-catalog"),
		menuItem: $(".header-bottom__menu_catalog"),
		showClass: "header-catalog_show",
		activeClass: "header-catalog_active",
		animationTime: 300,
		timer: null,
		show() {
			clearTimeout(this.timer);
			this.element.addClass(this.showClass);
			setTimeout(() => {
				this.element.addClass(this.activeClass);
			}, 1);
		},
		hide() {
			this.element.removeClass(this.activeClass);
			this.timer = setTimeout(() => {
				this.element.removeClass(this.showClass);
			}, this.animationTime);
			this.element
				.find(".header-catalog__block")
				.removeClass("header-catalog__block_show");
			this.element
				.find(".header-catalog__menu-item")
				.removeClass("header-catalog__menu-item_active");
		},
	};

	// * Fixed background params object
	const fixedBackground = {
		element: $(".fixed-background"),
		activeClass: "fixed-background_active",
		showClass: "fixed-background_shown",
		timer: null,
		animationTime: 300,
		show() {
			clearTimeout(this.timer);
			this.element.addClass(this.showClass);
			setTimeout(() => {
				this.element.addClass(this.activeClass);
			}, 1);
		},
		hide() {
			this.element.removeClass(this.activeClass);
			this.timer = setTimeout(() => {
				this.element.removeClass(this.showClass);
			}, this.animationTime);
		},
	};

	// * Shows a menu with brands when hovering over the menu item "Catalog of cars"
	$(".header-bottom__menu_catalog").on("mouseenter", function () {
		const element = $(this);

		if (element.hasClass("header-bottom__menu_catalog")) {
			hCatalog.show();
			hCatalog.menuItem.addClass("header-bottom__menu_active");
		} else {
			hCatalog.hide();
			hCatalog.menuItem.removeClass("header-bottom__menu_active");
		}
		clearTimeout(fixedBackground.timer);
		fixedBackground.show();
	});

	// * Hides the menu with brands when leaving the block
	$(".header-bottom__menu_catalog").on("mouseleave", function (e) {
		const defaultMenuBlock = $(".header-catalog__default");
		defaultMenuBlock.removeClass("header-catalog__default_hidden").show();
		hCatalog.hide();
		hCatalog.menuItem.removeClass("header-bottom__menu_active");
		fixedBackground.hide();
	});

	// * Init mobile menu
	new mobileMenu();

	// * Show sidebar on mobile
	$(".catalog-mob__filter").on("click", function () {
		toggleCatalogSidebar();
	});

	// * Closes the sidebar on mobile
	$(".catalog-sidebar__back").on("click", function () {
		toggleCatalogSidebar();
	});

	// * Shows subdirectories in the header directory menu
	$(".header-catalog__menu-item").on("mouseenter", function () {
		const element = $(this);
		const elementIndex = element.index();
		const menuBlock = $(".header-catalog__block");
		const headerCatalogMenuItems = $(".header-catalog__menu-item");
		const defaultMenuBlock = $(".header-catalog__default");

		if (menuBlock[elementIndex]) {
			defaultMenuBlock.addClass("header-catalog__default_hidden").hide();
			headerCatalogMenuItems.removeClass("header-catalog__menu-item_active");
			element.addClass("header-catalog__menu-item_active");
			menuBlock.removeClass(
				"header-catalog__block_active header-catalog__block_show"
			);
			menuBlock[elementIndex].classList.add("header-catalog__block_show");
		}
	});

	// * Product accessories block
	const PAClass = {
		activeMenu: "product-accessories__menu_active",
		activeAccessories: "product-accessories__item_shown",
		accessoriesItem: ".product-accessories__item",
	};

	$(".product-accessories__menu-item").on("click", function () {
		const element = $(this);
		const index = element.index();
		const block = $(PAClass.accessoriesItem).eq(index);
		element.siblings().removeClass(PAClass.activeMenu);
		element.addClass(PAClass.activeMenu);
		$(PAClass.accessoriesItem).removeClass(PAClass.activeAccessories);
		block.addClass(PAClass.activeAccessories);
	});

	// * Product card button for scroll to map
	$(".product-scroll_tomap").on("click", function () {
		const mapElement = $(".product-salon");
		const fixedProductHeight = $(".product-fixed_active").length
			? $(".product-fixed_active").innerHeight()
			: 0;
		if (!mapElement.length) return;
		$("html, body").animate(
			{ scrollTop: mapElement.offset().top - fixedProductHeight },
			700
		);
	});

	$("input.validate-field[type=checkbox]").on("change", function () {
		const element = $(this);
		if (element.is(":checked"))
			element
				.parent()
				.find(".custom-agreement__checker")
				.removeClass("validate-error");
	});
});

// панель управления


// открытие ПУ
$(".panel-btns__item").each(function() {
  $(this).on("click", function(){
  if($(this).hasClass("panel-btns__item_settings")) {
    $(".panel-nav__item[data-type=common-settings]").addClass("active").siblings().removeClass("active");
    $(".common-settings").addClass("active").siblings().removeClass("active")
  } else {
    $(".panel-nav__item[data-type=site-type]").addClass("active").siblings().removeClass("active");
    $(".site-type").addClass("active").siblings().removeClass("active")
  }
	$(".panel").addClass("active");
	$(".modals").addClass("modals_shown");
	setTimeout(() => {
		$(".modals").addClass("modals_active");
	}, 0);
	bodyFixed();
  })
})


// переключение блоков в ПУ
$(".panel-nav__item").each(function(){
	$(this).on("click", function(){
		let dataType = $(this).attr("data-type");
		$(this).addClass("active").siblings().removeClass("active");
		$(".panel-content__item").each(function(){
			if($(this).hasClass(dataType)) {
				$(this).addClass("active").siblings().removeClass("active");
			}
		})
	})
})

$(".panel-option").each(function(){
	$(this).on("click", function(){
		$(this).addClass("selected").siblings().removeClass("selected");
	});
})

// вызов палитры 
$(".color_custom-field").spectrum({
  // color: "#f00"
  showInput: true,
  chooseText: "Выбрать",
  cancelText: "Отменить",
  // showAlpha: true,
  preferredFormat: "hex",
  showInitial: true,
});


// выбор основоного цвета и запись значения в скрытый инпут
$(".base_color").each(function(){
	$(this).on("click", function(){
		$(this).addClass("selected").siblings().removeClass("selected");
		let color = $(this).attr("data-color");
		$("#BASE_COLOR").val(color);
			$("#base_color_custom_picker").val('');
			$(this).closest(".panel-content__item").find(".panel-button").show().closest(".panel-content__main").addClass("scroll-content");
			$(".color_custom-bg").removeClass("active")
	})
})

// выбор кастомного цвета и запись значения в скрытый инпут
$(".sp-choose").on("click", function(){
	let customColor = $(".sp-input").val();
		$(".vals").text(customColor);
		$(".color_custom-bg").attr("data-color", customColor).css({background: `${customColor}`}).addClass("active");
		$("#base_color_custom_picker").val(customColor);
		$("#BASE_COLOR").val('');
		$(".base_color").removeClass("selected");
		$(".common-settings").find(".panel-button").show().closest(".panel-content__main").addClass("scroll-content");
})


// закрытие ПУ по клику вне (мешает палитра так так находится вне ПУ и клик на палитру закрывает ПУ)

// $(document).mouseup(function (e) {
//   if ($(".modals").is(":visible")) {
//     const panel = $(".panel");
//     if (!panel.is(e.target) && panel.has(e.target).length === 0) {
//       panel.removeClass("active");
//       $(".modals").removeClass("modals_shown");
//       setTimeout(() => {
//         $(".modals").removeClass("modals_active");
//       }, 0);
//       removeFixed();
//     }
//   }
// })

// закрытие ПУ по кнопке закрыть

$(".panel-close").on("click", () => {
	$(".panel").removeClass("active");
      $(".modals").removeClass("modals_shown");
      setTimeout(() => {
        $(".modals").removeClass("modals_active");
      }, 0);
      removeFixed();
})


$(".panel-content__item").each(function () {
	const option = $(this).find(".panel-option")
	const btn = $(this).find(".panel-button")
	const toggler = $(this).find(".toggle-checkbox")
	const baseColor = $(this).find(".base_color")
	option.each(function () {
		$(this).on("click", function () {
			btn.show().closest(".panel-content__main").addClass("scroll-content");
		})
	})

	toggler.each(function () {
		$(this).on("change", function () {
			btn.show().closest(".panel-content__main").addClass("scroll-content");
		})
	})

	baseColor.each(function () {
		$(this).on("click", function () {
			btn.show().closest(".panel-content__main").addClass("scroll-content");
		})
	})
	
})

if (document.querySelector(".banner-slider")) {
	new Swiper(".banner-slider", {
		speed: 400,
		slidesPerView: 1,
		spaceBetween: 16,
		pagination: { el: ".banner-pagination", clickable: true },
		navigation: {
			nextEl: ".slider-button__circle-next",
			prevEl: ".slider-button__circle-prev",
		},
	});
}

if (document.querySelector(".available-slider")) {
	new Swiper(".available-slider", {
		speed: 400,
		slidesPerView: "auto",
		spaceBetween: 16,
		breakpoints: {
			1300: {
				spaceBetween: 30,
			},
			1000: {
				spaceBetween: 20,
			},
		},
		pagination: { el: ".available-pagination", clickable: true },
		navigation: {
			nextEl: ".slider-button__circle-next",
			prevEl: ".slider-button__circle-prev",
		},
	});
}

if (document.querySelector(".commingsoon-slider")) {
	new Swiper(".commingsoon-slider", {
		speed: 400,
		slidesPerView: "auto",
		spaceBetween: 16,
		breakpoints: {
			1300: {
				spaceBetween: 30,
			},
			1000: {
				spaceBetween: 20,
			},
		},
		pagination: { el: ".commingsoon-pagination", clickable: true },
		navigation: {
			nextEl: ".slider-button__circle-next",
			prevEl: ".slider-button__circle-prev",
		},
	});
}

if (document.querySelector(".info-slider")) {
	new Swiper(".info-slider", {
		speed: 400,
		slidesPerView: "auto",
		spaceBetween: 16,
		wrapperClass: "info-slider__wrapper",
		slideClass: "info-slider__slide",
		breakpoints: {
			1300: {
				spaceBetween: 30,
			},
			1000: {
				spaceBetween: 20,
			},
		},
		pagination: { el: ".info-slider__pagination", clickable: true },
		navigation: {
			nextEl: ".slider-button__circle-next",
			prevEl: ".slider-button__circle-prev",
		},
	});
}

if (document.querySelector(".newssection-slider")) {
	new Swiper(".newssection-slider", {
		speed: 400,
		slidesPerView: "auto",
		spaceBetween: 16,
		wrapperClass: "newssection-wrapper",
		slideClass: "newssection-item",
		breakpoints: {
			1300: {
				spaceBetween: 30,
				slidesPerView: 4,
			},
			1000: {
				spaceBetween: 20,
				slidesPerView: 4,
			},
		},
	});
}

if (document.querySelector(".autoservice-inner")) {
	new Swiper(".autoservice-inner", {
		speed: 400,
		slidesPerView: "auto",
		spaceBetween: 16,
		wrapperClass: "autoservice-items",
		slideClass: "autoservice-item",
		breakpoints: {
			1300: {
				spaceBetween: 30,
				slidesPerView: 4,
			},
			1000: {
				spaceBetween: 20,
				slidesPerView: 4,
			},
		},
	});
}

if (document.querySelector(".brand-new__slider")) {
	new Swiper(".brand-new__slider", {
		speed: 400,
		slidesPerView: "auto",
		spaceBetween: 16,
		breakpoints: {
			1300: {
				spaceBetween: 30,
			},
			1000: {
				spaceBetween: 20,
			},
		},
		pagination: { el: ".available-pagination", clickable: true },
		navigation: {
			nextEl: ".slider-button__circle-next",
			prevEl: ".slider-button__circle-prev",
		},
	});
}

if (document.querySelector(".brand-old__slider")) {
	new Swiper(".brand-old__slider", {
		speed: 400,
		slidesPerView: "auto",
		spaceBetween: 16,
		breakpoints: {
			1300: {
				spaceBetween: 30,
			},
			1000: {
				spaceBetween: 20,
			},
		},
		pagination: { el: ".available-pagination", clickable: true },
		navigation: {
			nextEl: ".slider-button__circle-next",
			prevEl: ".slider-button__circle-prev",
		},
	});
}

if (document.querySelector(".model-gallery__slider")) {
	new Swiper(".model-gallery__slider", {
		speed: 400,
		slidesPerView: "auto",
		spaceBetween: 16,
		// breakpoints: {
		// 	320: {
		// 		slidesPerView: 2.2,
		// 		direction: "horizontal",
		// 	},
		// 	480: {
		// 		slidesPerView: 3,
		// 	},
		// 	640: {
		// 		slidesPerView: 4,
		// 	},
		// 	1000: {
		// 		spaceBetween: 20,
		// 	},
		// },
		navigation: {
			nextEl: ".slider-button__circle-next",
			prevEl: ".slider-button__circle-prev",
		},
	});
}

function initSliders() {
	if (
		document.querySelector(".gallery-slider__preview-wrap") &&
		document.querySelector(".gallery-slider__main-wrap")
	) {
		const rightSlider = new Swiper(".gallery-slider__preview-wrap", {
			autoHeight: true,
			spaceBetween: 10,
			slidesPerView: 1,
			loop: true,
			// scrollbar: {
			// 	el: ".swiper-scrollbar",
			// },
			breakpoints: {
				320: {
					slidesPerView: 2.2,
					direction: "horizontal",
				},
				480: {
					slidesPerView: 3,
				},
				640: {
					slidesPerView: 4,
				},
				1100: {
					direction: "vertical",
					spaceBetween: 30,
					slidesPerView: "auto",
				},
			},
		});

		if (document.querySelector(".gallery-slider__main-wrap")) {
			new Swiper(".gallery-slider__main-wrap", {
				direction: "horizontal",
				spaceBetween: 30,
				effect: "fade",
				thumbs: {
					swiper: rightSlider,
				},
			});
		}
	}
}
initSliders();

if (document.querySelector(".tabs-slider")) {
	new Swiper(".tabs-slider", {
		speed: 400,
		slidesPerView: "auto",
		spaceBetween: 16,
		wrapperClass: "tabs-slider__wrapper",
		slideClass: "tabs-slider__slide",
		breakpoints: {
			1300: {
				spaceBetween: 30,
			},
			1000: {
				spaceBetween: 20,
			},
		},
		pagination: { el: ".tabs-slider__pagination", clickable: true },
		navigation: {
			nextEl: ".slider-button__circle-next",
			prevEl: ".slider-button__circle-prev",
		},
	});
}






function productSliders() {
	if (
		document.querySelector(".product__slider-nav") &&
		document.querySelector(".product__slider-main")
	) {
		const mainSlider = new Swiper(".product__slider-nav", {
			direction: "horizontal",
			spaceBetween: 10,
			slidesPerView: 5,
			breakpoints: {
				320: {
					slidesPerView: 2.2,
				},
				480: {
					slidesPerView: 3,
				},
				640: {
					slidesPerView: 4,
				},
				950: {
					spaceBetween: 10,
				},
			},
		});

		if (document.querySelector(".product__slider-main")) {
			new Swiper(".product__slider-main", {
				direction: "horizontal",
				spaceBetween: 30,
				thumbs: {
					swiper: mainSlider,
				},
			});
		}
	}
}
productSliders();

if (document.querySelector(".detailed-page-slider__wrapper")) {
	new Swiper(".detailed-page-slider__wrapper", {
		speed: 400,
		slidesPerView: "1",
		effect: "fade",
		navigation: {
			nextEl: ".slider-button__circle-next",
			prevEl: ".slider-button__circle-prev",
		},
		pagination: {
			el: ".swiper-pagination",
		},
	});
}

if (document.querySelectorAll(".header-catalog__brands-inner").length) {
	new Swiper(".header-catalog__brands-inner", {
		slidesPerView: "auto",
		wrapperClass: "header-catalog__brands-items",
		slideClass: "header-catalog__brand-item",
		spaceBetween: 24,
	});
}

if (document.querySelectorAll(".product-accessories__menu").length) {
	new Swiper(".product-accessories__menu", {
		slidesPerView: "auto",
		wrapperClass: "product-accessories__menu-wrapper",
		slideClass: "product-accessories__menu-item",
		spaceBetween: 30,
	});
}

// * Init slider for salons on breakpoint lower then 1000px and destroy slider greater then 1000px
let salonsSliderInstance = null;

function mobileSalonsAdressSlider() {
	if (!document.querySelector(".salons-info")) return;
	if (
		window.innerWidth < 1000 &&
		!document
			.querySelector(".salons-info")
			.classList.contains("swiper-initialized")
	) {
		salonsSliderInstance = new Swiper(".salons-info", {
			wrapperClass: "salons-info__wrap",
			slideClass: "salons-info__item",
			slidesPerView: "auto",
			spaceBetween: 16,
		});
	} else if (window.innerWidth > 1000 && salonsSliderInstance !== null) {
		salonsSliderInstance.destroy(true, true);
	}
}

mobileSalonsAdressSlider();

function salonsMapInit() {
	let salonsMap = new ymaps.Map("salonsMap", {
		center: [55.703383, 37.643058],
		zoom: 17,
		controls: ["zoomControl", "typeSelector"],
	});

	let myPlacemark = new ymaps.Placemark(
		salonsMap.getCenter(),
		{},
		{
			iconLayout: "default#image",
			iconImageHref: "assets/img/map_point.png",
			iconImageSize: [30, 40],
			iconImageOffset: [-15, -40],
		}
	);

	salonsMap.geoObjects.add(myPlacemark);
}

document.addEventListener("DOMContentLoaded", function () {
	if (!!document.querySelector("#salonsMap")) {
		ymaps.ready(salonsMapInit);
	}
});

$(document).on("mouseup", function (e) {
	const trackedElement1 = $(".header-top__dropdown");
	if (trackedElement1.hasClass("header-top__dropdown_active")) {
		if (
			!trackedElement1.is(e.target) &&
			trackedElement1.has(e.target).length === 0
		) {
			toggleHeaderTopDropdown();
		}
	}

	const trackedElement2 = $(".menumobile");
	if (trackedElement2.hasClass("act")) {
		let menumobile = $(".menumobile.act .menumobile-wrap");
		if (!menumobile.is(e.target) && menumobile.has(e.target).length === 0) {
			hideMenuMobile();
			burgerRemoveAnim();
		}
	}

	const trackedElement3 = $(".modal");
	if (trackedElement3.hasClass("modal_active")) {
		let isFocus = false;
		trackedElement3.find("input").each(function () {
			if ($(this).is(":focus")) isFocus = true;
		});

		let menumobile = $(".modal.modal_active");
		if (
			!isFocus &&
			!menumobile.is(e.target) &&
			menumobile.has(e.target).length === 0
		) {
			hideAllModals();
		}
	}
});

//* аккордеоны
$(".accordion-head").on("click", function (e) {
	e.stopPropagation();
	$(this).toggleClass("active");
	$(this).parent().find(".accordion-body").slideToggle(300);
});

// * выбор цвета в боковом фильтре

// $(".catalog-sidebar__filter-colors-item").on("click", function () {
//   $(this).toggleClass("catalog-sidebar__filter-colors-item_selected");
// });

$(".catalog-sidebar__filter-colors-checkbox").on("click", function () {
	const input = $(this).find("input");
	if (input.is(":checked")) {
		$(this).addClass("bordered");
	} else {
		$(this).removeClass("bordered");
	}
});

// * Объявляет селекты при их наличии
if ($("select").length) $("select").selectize();

// * Вычисляет ширину полосы прокрутки
function scrollWidth() {
	const div = document.createElement("div");
	div.style.height = "50px";
	div.style.width = "50px";
	div.style.overflowY = "scroll";

	document.body.appendChild(div);

	const scrollWidth = div.offsetWidth - div.clientWidth;
	div.remove();
	return scrollWidth;
}

// * Функция для очистки стилей
function clearStyle(...el) {
	el.forEach(function (item) {
		item.each(function () {
			$(this).removeAttr("style");
		});
	});
}

// * все табы на сайте
document.querySelectorAll(".tabs-wrapper").forEach((e) => {
	let tabTabs = e.querySelectorAll(".tabs .tab");
	let tabItems = e.querySelectorAll(".tabs-items .item");
	for (let i = 0; i < tabTabs.length; i++) {
		tabTabs[0].click();
		tabTabs[i].onclick = () => {
			tabTabs.forEach((e) => {
				e.classList.remove("on");
			});
			tabItems.forEach((e) => {
				e.classList.remove("on");
			});
			tabTabs[i].classList.add("on");
			tabItems[i].classList.add("on");
		};
	}
});

// * добавляет класс на новую цену, если указана старая
$(".card-info__price").each(function () {
	const oldPrice = $(this).find(".card-info__price-old");
	const currentPrice = $(this).find(".card-info__price-current");

	if (!oldPrice.text() == "") {
		currentPrice.addClass("card-info__price-current_new");
	}
});

// * якоря на странице модели
$(".model-nav__item").on("click", function () {
	$(this).addClass("active");
	$(this).siblings().removeClass("active");
});

// * плавный скролл на якоря

$("body").on("click", '[href*="#"]', function (e) {
	var fixed_offset = 100;
	if (!$(this.hash).length) return;
	$("html,body")
		.stop()
		.animate({ scrollTop: $(this.hash).offset().top - fixed_offset }, 1000);
	e.preventDefault();
});
// * попапы с видео
MediaBox(".mediabox");

// * меняет сетку на странице услуг в зависимости от количества преимущест
const benefits = $(".services-benefits__item").length;
console.log(benefits);
if (benefits <= 5) {
	$(".services-benefits__items")
		.removeClass("services-benefits__items_grid4")
		.addClass("services-benefits__items_grid5");
} else {
	$(".services-benefits__items")
		.addClass("services-benefits__items_grid4")
		.removeClass("services-benefits__items_grid5");
}

// * анимация секции процесс покупки на старнице услуг

if (window.innerWidth > 576) {
	$(window).scroll(function () {
		let wt = $(window).scrollTop();
		let wh = $(window).height();
		if (!$(".services-process").length) return;
		let et = $(".services-process").offset().top;
		let eh = $(".services-process").outerHeight();
		let dh = $(document).height();
		if (wt + wh >= et || wh + wt == dh || eh + et < wh) {
			let index = 0;

			let intrvl = setInterval(function () {
				$(".services-process__item")
					.eq(index)
					.find(".services-process__number-filled")
					.animate({ width: "show" }, 400);
				$(".services-process__item")
					.eq(index)
					.find("span")
					.animate({ width: "show" }, 300);
				index++;
				if (index >= $(".services-process__item").length) {
					clearInterval(intrvl);
				}
			}, 500);
		}
	});
}

// * смена цвета и текста блока доступности товара в карточке товара

$(".product__availability_available").text("В наличии");
$(".product__availability_unavailable").text("Нет наличии");
$(".product__availability_soon-available").text("Скоро наличии");

// * тултипы в карточке товара

const instance = tippy(".tooltip-product", {
	content: (instance) =>
		instance.closest(".tooltip-row").querySelector(".tooltip-body"),
	placement: "bottom",
	trigger: "click",
	maxWidth: "auto",
	interactive: true,
	appendTo: () => document.body,
	onShow: (instance) => {
		instance.popper.classList.add("locks-tippy");
	},
});

$(document).on("click", ".tooltip__close", function (params) {
	const element = $(this);
	const parent = element.closest("[data-tippy-root]");
	parent[0]._tippy.hide();
});

// * пагинация
$(".pagination-item").on("click", function () {
	$(this).addClass("active").siblings().removeClass("active");
});

let testEmail = /^[A-Z0-9._%+-]+@([A-Z0-9-]+\.)+[A-Z]{2,6}$/i;

// * Форма Заявка на оценку вашего автомобиля

$(document).on("submit", ".services-order__form", function (e) {
	e.preventDefault();
	const form = $(this);
	const fd = new FormData();
	let btn = form.find(".services-order__submit");
	let btnOld = form.find(".services-order__submit").html();
	const agreement = form.find("input[type=checkbox]");
	let validateFields = false;
	let validationCheckbox = false;
	let correct = 0;
	const fieldsCount = form.find(".validate-field").length;
	form.find(".error").length ? form.find(".error").remove() : null;
	const error = document.createElement("div");
	error.className = "error";
	form.find(".validate-field").each(function () {
		if (
			$(this).attr("name") === "phone" &&
			onlyNumber($(this).val()).length < 10
		) {
			correct--;
			$(this).addClass("validate-error");
			error.textContent = "Некорректный номер телефона";
			!form.find(".error").length ? btn.after(error) : null;
		}

		if (!$(this).val()) {
			$(this).addClass("validate-error");
			error.textContent = "Заполните все поля";
			!form.find(".error").length ? btn.after(error) : null;
		} else {
			correct++;
		}

		if (correct === fieldsCount) {
			validateFields = true;
		}
	});

	// * Проверка на согласие обработки информации
	if (agreement.length && !agreement.is(":checked")) {
		agreement
			.closest(".agreement")
			// .find(".custom-checkbox__checker")
			.addClass("agreement-error");

		validationCheckbox = false;
	} else {
		agreement
			.closest(".agreement")
			// .find(".custom-checkbox__checker")
			.removeClass("agreement-error");
		validationCheckbox = true;
	}

	agreement.on("change", function () {
		agreement
			.closest(".agreement")
			// .find(".custom-checkbox__checker")
			.removeClass("agreement-error");
	});

	if (validateFields && validationCheckbox) {
		form.find(".validate-field").removeClass("validate-error");
		form
			.find("input, textarea")
			.not("input[type=checkbox]")
			.each(function () {
				if ($(this).val()) {
					fd.append($(this).attr("name"), $(this).val());
				}
			});

		addBtnLoader(btn);
		ajaxPost("https://jsonplaceholder.typicode.com/users", fd)
			.then((response) => response.json())
			.then((data) => {
				removeBtnLoader(btn, btnOld);
				// opensuccess();
				console.log("окно спасибо");
				form.trigger("reset");
				form.find(".custom-select__value-hidden").val("");
				form.find(".custom-select__value-visible").css({ opacity: "0" });
				form.find(".custom-select").removeClass("custom-select_selected");
			})
			.catch((error) => console.log(error));
	}
});

// $(".validate-field").on("input", function () {
// 	$(this).removeClass("validate-error");
// });

// * считает основную цену при переключении (вкл/выкл) предложения в карточке товара

$(".toggle-checkbox").each(function () {
	$(this).on("change", function () {
		if ($(this).is(":checked")) {
			let currentPrice = $(".product-content .product__price-current span")
				.text()
				.replace(/\D/g, "");
			const sum = $(this)
				.closest(".toggler")
				.find(".toggler-comment")
				.attr("data-sum");
			const newSum = currentPrice - sum;
			const format = newSum.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");

			$(".product-content .product__price-current span").text(format);
			$(".modal-offer__price .product__price-current span").text(format);
		} else {
			let currentPrice = $(".product-content .product__price-current span")
				.text()
				.replace(/\D/g, "");
			const sum = $(this)
				.closest(".toggler")
				.find(".toggler-comment")
				.attr("data-sum");
			const newSum = +currentPrice + +sum;

			const format = newSum.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");

			$(".product-content .product__price-current span").text(format);
			$(".modal-offer__price .product__price-current span").text(format);
		}
	});
});



// * форма получить прайс лист на странице о компании и То

$(document).on("submit", ".about-form", function (e) {
	e.preventDefault();
	const form = $(this);
	const fd = new FormData();
	let btn = form.find(".about-form__submit");
	let btnOld = form.find(".about-form__submit").html();
	let validateFields = false;
	let correct = 0;
	const fieldsCount = form.find(".validate-field").length;
	form.find(".error").length ? form.find(".error").remove() : null;
	const error = document.createElement("div");
	error.className = "error";
	form.find(".validate-field").each(function () {
		if (
			$(this).attr("name") === "phone" &&
			onlyNumber($(this).val()).length < 10
		) {
			correct--;
			$(this).addClass("validate-error");
			error.textContent = "Некорректный номер телефона";
			!form.find(".error").length ? btn.after(error) : null;
		}

		if (!$(this).val()) {
			$(this).addClass("validate-error");
			error.textContent = "Заполните все поля";
			!form.find(".error").length ? btn.after(error) : null;
		} else {
			correct++;
		}

		if (correct === fieldsCount) {
			validateFields = true;
		}
	});

	if (validateFields) {
		form.find(".validate-field").removeClass("validate-error");
		form
			.find("input, textarea")
			.not("input[type=checkbox]")
			.each(function () {
				if ($(this).val()) {
					fd.append($(this).attr("name"), $(this).val());
				}
			});

		addBtnLoader(btn);
		ajaxPost("https://jsonplaceholder.typicode.com/users", fd)
			.then((response) => response.json())
			.then((data) => {
				removeBtnLoader(btn, btnOld);
				// opensuccess();
				console.log("окно спасибо");
				form.find(".validate-field").removeClass("custom-input_active");
				form.trigger("reset");
				form.find(".custom-select__value-hidden").val("");
				form.find(".custom-select__value-visible").css({ "opacity": "0" });
				form.find(".custom-select").removeClass("custom-select_selected");
			})
			.catch((error) => console.log(error));
	}
});

// * показывает больше цент на услуги на странице ТО
function toggleStoItemVisibility() {
	const button = $(".sto-prices__more-btn");
	const serviceItem = $(".sto-prices__item");
	const wrapper = $(".sto-prices-wrap");
	const CLASS = {
		hidden: "sto-prices__item_hidden",
		visible: "sto-prices__item_shown",
	};
	return function () {
		if (serviceItem.hasClass(CLASS.hidden)) {
			button.text("Скрыть");
			serviceItem.filter(`.${CLASS.hidden}`).removeClass(CLASS.hidden).addClass(CLASS.visible);
		} else if (serviceItem.hasClass(CLASS.visible)) {
			button.text("Показать еще");
			serviceItem.filter(`.${CLASS.visible}`).removeClass(CLASS.visible).addClass(CLASS.hidden);
			window.scrollTo(0, wrapper.offset().top + wrapper.innerHeight() / 4);
		}
	};
}

const toggleVisibility = toggleStoItemVisibility();

$(".sto-prices__more-btn").on("click", toggleVisibility);



$(".product__slide-more").on("click", function () {
	Fancybox.show(gallery);

});

// * имитация фильтра на странице акции

$(".catalog-select_sort-actions").on("change", function () {
	const chosenSort = $(this).find("option").val();
	console.log($(".actions-item[data-action=sto]").length);
	
	if (chosenSort == "Сервис") {

		$(".actions-item[data-action=sto]").show();
		$(".actions-item[data-action=sales]").hide();
	} else if (chosenSort == "Отдел продаж") {
		
		$(".actions-item[data-action=sales]").show();
		$(".actions-item[data-action=sto]").hide();
	} else {
	
		$(".actions-item").show();
	}
});


$(".catalog-select_sort-brands").on("change", function () {
	const chosenSort = $(this).find("option").val();
		console.log(chosenSort);
	$(".actions-item").each(function () {
		const dataBrand = $(this).attr("data-brand");
		if (dataBrand == chosenSort) {
			$(this).show();
		} else if (chosenSort == "Все бренды") {
			$(".actions-item").show();
		} else {
			$(this).hide();
		}
	});
});






// * hide all modals on page
function hideAllModals() {
	$(".modals").removeClass("modals_active");
	$(".modal").removeClass("modal_active");
	setTimeout(() => {
		$(".modals").removeClass("modals_shown");
		$(".modal").removeClass("modal_shown");
	}, 300);
	removeFixed();
}

// * Reset form fields
function clearModalForm(form = null) {
	const forms =
		form !== null ? form.get() : document.querySelectorAll(".modal-form");
	if (form.length) {
		forms.forEach((form) => {
			form.reset();
			form.querySelectorAll(".custom-input_active").forEach((input) => {
				input.classList.remove("custom-input_active");
			});
		});
	}
}

function openSuccessModal() {
	showModal($(".modal-success"), (showWrap = true));
}

// * hide only one modal on page
function hideModal(modalParam, hideWrap = true) {
	let modal = null;

	if (typeof modalParam === "object") {
		modal = modalParam.jquery ? modalParam.get(0) : modalParam;
	}

	if (typeof modalParam === "string") {
		modal = document.getElementsByClassName(modalParam).length
			? document.getElementsByClassName(modalParam)[0]
			: document.querySelector(`.modal[data-modal="${modalParam}"]`);
	}

	if (!modal) throw "modal window not found";

	if (hideWrap) {
		modal.closest(".modals").classList.remove("modals_active");
		setTimeout(function () {
			modal.closest(".modals").classList.remove("modals_shown");
		}, 300);
	}

	modal.classList.remove("modal_active");
	setTimeout(function () {
		modal.classList.remove("modal_shown");
	}, 300);
	removeFixed();
}

// * hide only one modal on page
function showModal(modalParam, showWrap = true) {
	let modal = null;

	if (typeof modalParam === "object") {
		modal = modalParam.jquery ? modalParam.get(0) : modalParam;
	}

	if (typeof modalParam === "string") {
		modal = document.getElementsByClassName(modalParam).length
			? document.getElementsByClassName(modalParam)[0]
			: document.querySelector(`.modal[data-modal="${modalParam}"]`);
	}

	if (!modal) throw "modal window not found";

	if (showWrap) {
		modal.closest(".modals").classList.add("modals_shown");
		setTimeout(function () {
			modal.closest(".modals").classList.add("modals_active");
		}, 0);
	}

	modal.classList.add("modal_shown");
	setTimeout(function () {
		modal.classList.add("modal_active");
	}, 0);
	bodyFixed();
}

// * Validate fields function
function modalValidateFields(field) {
	let inputValidStatus = false;
	let checkboxValidStatus = false;
	const validErrorClass = "validate-error";
	const validateInputs = field.not('.validate-field[type="checkbox"]').get();
	const validateCheckbox = field
		.map(function () {
			if ($(this).is('.validate-field[type="checkbox"]')) return this;
		})
		.get();
	const validateInputsLength = validateInputs.length;
	const validateCheckboxLength = validateCheckbox.length;
	field.closest("form").find(".error").remove();

	validateInputs.forEach((input, i) => {
		const value = input.value.trim();
		if (!value.length && !input.closest(".custom-select__head")) {
			inputValidStatus = false;
			input.classList.add(validErrorClass);
			i--;
			addErrorMessage({
				element: input.parentNode,
				message: "Заполните поле",
				position: "bottom",
				className: "modal-error",
			});
		}
		if (!value.length && input.closest(".custom-select__head")) {
			inputValidStatus = false;
			input.closest(".custom-select__head").classList.add(validErrorClass);
			i--;
			addErrorMessage({
				element: input.closest(".custom-select"),
				message: "Выберите пункт",
				position: "bottom",
				className: "modal-error",
			});
		}
		if (value.length) {
			if (
				input.getAttribute("type") === "tel" &&
				onlyNumber(value).toString().length < 10
			) {
				inputValidStatus = false;
				input.classList.add(validErrorClass);
				i--;
				addErrorMessage({
					element: input.parentNode,
					message: "Некорректный формат",
					position: "bottom",
					className: "modal-error",
				});
			}
			if (input.getAttribute("type") === "email" && !testEmail.test(value)) {
				inputValidStatus = false;
				input.classList.add(validErrorClass);
				i--;
				addErrorMessage({
					element: input.parentNode,
					message: "Некорректный формат",
					position: "bottom",
					className: "modal-error",
				});
			}

			if (validateInputsLength === ++i) inputValidStatus = true;
		}
	});

	if (validateCheckbox !== undefined && validateCheckboxLength) {
		validateCheckbox.forEach((checkbox, i) => {
			if (!checkbox.checked) {
				checkboxValidStatus = false;
				checkbox.parentNode
					.querySelector(".custom-agreement__checker")
					.classList.add(validErrorClass);
				i--;
				// addErrorMessage({
				// 	element: checkbox.parentNode,
				// 	message: "Поставьте галочку",
				// 	position: "bottom",
				// 	className: "modal-error",
				// });
			}

			if (validateCheckboxLength === ++i) checkboxValidStatus = true;
		});
	}

	if (!inputValidStatus) return false;
	if (!checkboxValidStatus) return false;
	if (inputValidStatus && checkboxValidStatus) return true;
}

$(".validate-field");

function renderModalOfferItems(data) {
	const modalOfferElement = $(".modal-offer__options");
	modalOfferElement.empty();
	const CLASS = {
		optionItem: "modal-offer__option",
		optionIcon: "modal-offer__option-icon",
		optionInfo: "modal-offer__option-info",
		optionText: "modal-offer__option-title",
		optionPrice: "modal-offer__option-price",
		optionInput: "modal-offer__option-input",
	};

	data.forEach((item) => {
		const optionItem = document.createElement("div");
		const optionIcon = document.createElement("div");
		const optionInfo = document.createElement("div");
		const optionText = document.createElement("div");
		const optionPrice = document.createElement("div");
		const optionInput = document.createElement("input");
		optionItem.className = CLASS.optionItem;
		optionIcon.className = CLASS.optionIcon;
		optionInfo.className = CLASS.optionInfo;
		optionText.className = CLASS.optionText;
		optionPrice.className = CLASS.optionPrice;
		optionInput.className = CLASS.optionInput;
		optionInput.value = item.text.trim();
		optionInput.type = "hidden";
		optionInput.name = "choosed_option";

		optionText.textContent = item.text.trim();
		optionPrice.textContent = item.price;
		optionInfo.append(optionText, optionPrice);
		optionItem.append(optionIcon, optionInfo, optionInput);
		modalOfferElement.append(optionItem);
	});
}

$(".open-modal-offer").on("click", function () {
	const price = $(".product__price").html();
	const activeOptions = [];
	const modal = $(".modal.modal-offer");

	$(".product__switcher-item").each(function () {
		const element = $(this);

		if (element.find('input[type="checkbox"]').is(":checked")) {
			activeOptions.push({
				text: element
					.find(".product__switcher-comment")
					.get(0)
					.textContent.trim(),
				price: element.find(".toggler-comment").get(0).textContent.trim(),
			});
		}
	});

	modal.find(".modal-offer__price").html(price);
	renderModalOfferItems(activeOptions);

	modal.closest(".modals").addClass("modals_shown");
	modal.addClass("modal_shown");
	setTimeout(() => {
		modal.closest(".modals").addClass("modals_active");
		modal.addClass("modal_active");
	}, 0);
	bodyFixed();
});

$(".modal-close").on("click", function () {
	const element = $(this);
	const modal = element.closest(".modal").attr("data-modal");
	hideModal(modal);
});

$(".open-modal").on("click", function (e) {
	e.preventDefault();
	const modalId = $(this).attr("data-modal");
	showModal(modalId);
});

$(".modal-form__offer").on("submit", function (e) {
	e.preventDefault();
	const form = $(this);
	const action = form.attr("action");
	const fd = new FormData();
	const options = [];
	const submitButton = form.find("button.modal-button");
	const submitButtonHtml = submitButton.html();
	const validResult = modalValidateFields(form.find("input.validate-field"));

	if (validResult) {
		form
			.find("input, textarea")
			.not('[name="agreement"], .modal-offer__option-input')
			.each(function () {
				const input = $(this);
				const value = input.val().trim();
				if (value.length) {
					fd.append(input.attr("name"), value);
				}
			});

		if (form.find(".modal-offer__option-input").length) {
			form.find(".modal-offer__option-input").each(function () {
				options.push($(this).val());
			});

			fd.append(form.find(".modal-offer__option-input").attr("name"), options);
		}

		addBtnLoader(submitButton);
		ajaxPost(action, fd, {}, { mode: "no-cors" })
			.then((response) => response.text())
			.then((data) => {
				clearModalForm(form);
				removeBtnLoader(submitButton, submitButtonHtml);
			})
			.catch((error) => {
				addErrorMessage({
					elem: submitButton,
					message: error.message,
					position: "bottom",
				});
			});
	}
});

$(".modal-form__booking").on("submit", function (e) {
	e.preventDefault();
	const form = $(this);
	const action = form.attr("action");
	const fd = new FormData();
	const options = [];
	const submitButton = form.find("button.modal-button");
	const submitButtonHtml = submitButton.html();

	const validResult = modalValidateFields(form.find("input.validate-field"));

	if (validResult) {
		form
			.find("input, textarea")
			.not(
				'.modal-agreements input.validate-field[type="checkbox"], .modal-services__checkbox input[type="checkbox"]'
			)
			.each(function () {
				const input = $(this);
				const value = input.val().trim();
				if (value.length) {
					fd.append(input.attr("name"), value);
				}
			});

		if (form.find('.modal-services__checkbox input[type="checkbox"]').length) {
			form
				.find('.modal-services__checkbox input[type="checkbox"]')
				.each(function () {
					options.push($(this).val());
				});

			fd.append(
				form
					.find('.modal-services__checkbox input[type="checkbox"]')
					.attr("name"),
				options
			);
		}

		addBtnLoader(submitButton);
		ajaxPost(action, fd, {}, { mode: "no-cors" })
			.then((response) => response.text())
			.then((data) => {
				clearModalForm(form);
				removeBtnLoader(submitButton, submitButtonHtml);
			})
			.catch((error) => {
				removeBtnLoader(submitButton, submitButtonHtml);
				addErrorMessage({
					elem: submitButton,
					message: error.message,
					position: "bottom",
				});
			});
	}
});

$(".modal-form__simple").on("submit", function (e) {
	e.preventDefault();
	const form = $(this);
	const action = form.attr("action");
	const fd = new FormData();
	const submitButton = form.find("button.modal-button");
	const submitButtonHtml = submitButton.html();
	const validResult = modalValidateFields(form.find("input.validate-field"));

	if (validResult) {
		form
			.find("input, textarea")
			.not('.modal-agreements input.validate-field[type="checkbox"]')
			.each(function () {
				const input = $(this);
				const value = input.val().trim();
				if (value.length) {
					fd.append(input.attr("name"), value);
				}
			});

		addBtnLoader(submitButton);
		ajaxPost(action, fd, {}, { mode: "no-cors" })
			.then((response) => response.text())
			.then((data) => {
				clearModalForm(form);
				removeBtnLoader(submitButton, submitButtonHtml);
			})
			.catch((error) => {
				removeBtnLoader(submitButton, submitButtonHtml);
				addErrorMessage({
					elem: submitButton,
					message: error.message,
					position: "bottom",
				});
			});
	}
});

// * маски для телефонов

document.addEventListener("DOMContentLoaded", function () {
	var phoneInputs = document.querySelectorAll("input[data-tel-input]");

	var getInputNumbersValue = function (input) {
		// Return stripped input value — just numbers
		return input.value.replace(/\D/g, "");
	};

	var onPhonePaste = function (e) {
		var input = e.target,
			inputNumbersValue = getInputNumbersValue(input);
		var pasted = e.clipboardData || window.clipboardData;
		if (pasted) {
			var pastedText = pasted.getData("Text");
			if (/\D/g.test(pastedText)) {
				// Attempt to paste non-numeric symbol — remove all non-numeric symbols,
				// formatting will be in onPhoneInput handler
				input.value = inputNumbersValue;
				return;
			}
		}
	};

	var onPhoneInput = function (e) {
		var input = e.target,
			inputNumbersValue = getInputNumbersValue(input),
			selectionStart = input.selectionStart,
			formattedInputValue = "";

		if (!inputNumbersValue) {
			return (input.value = "");
		}

		if (input.value.length != selectionStart) {
			// Editing in the middle of input, not last symbol
			if (e.data && /\D/g.test(e.data)) {
				// Attempt to input non-numeric symbol
				input.value = inputNumbersValue;
			}
			return;
		}

		if (["7", "8", "9"].indexOf(inputNumbersValue[0]) > -1) {
			if (inputNumbersValue[0] == "9")
				inputNumbersValue = "7" + inputNumbersValue;
			var firstSymbols = inputNumbersValue[0] == "8" ? "8" : "+7";
			formattedInputValue = input.value = firstSymbols + " ";
			if (inputNumbersValue.length > 1) {
				formattedInputValue += "(" + inputNumbersValue.substring(1, 4);
			}
			if (inputNumbersValue.length >= 5) {
				formattedInputValue += ") " + inputNumbersValue.substring(4, 7);
			}
			if (inputNumbersValue.length >= 8) {
				formattedInputValue += "-" + inputNumbersValue.substring(7, 9);
			}
			if (inputNumbersValue.length >= 10) {
				formattedInputValue += "-" + inputNumbersValue.substring(9, 11);
			}
		} else {
			formattedInputValue = "+" + inputNumbersValue.substring(0, 16);
		}
		input.value = formattedInputValue;
	};
	var onPhoneKeyDown = function (e) {
		// Clear input after remove last symbol
		var inputValue = e.target.value.replace(/\D/g, "");
		if (e.keyCode == 8 && inputValue.length == 1) {
			e.target.value = "";
		}
	};
	for (var phoneInput of phoneInputs) {
		phoneInput.addEventListener("keydown", onPhoneKeyDown);
		phoneInput.addEventListener("input", onPhoneInput, false);
		phoneInput.addEventListener("paste", onPhonePaste, false);
	}
});
