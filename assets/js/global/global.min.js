// * Class for scroller button
class scrollerButton {
	constructor(filterWrap, params = {}) {
		if (typeof filterWrap === "string") {
			this.buttons = document.querySelector(filterWrap);
		} else if (typeof filterWrap === "object") {
			this.buttons = filterWrap;
		} else {
			throw new Error(`filterWrap can be only "string" or "HTML Element"`);
		}

		this.config = {
			buttonClassName: params.buttonClass,
			buttonActiveClassName: params.buttonActiveClass,
			buttonScrollerClassName: params.buttonScrollerClass,
		};

		this.filterButton = this.config.buttonClassName
			? document.querySelector(this.config.buttonClassName)
			: this.buttons.querySelectorAll(".filter-status__button");
		this.activeFilterButton = this.config.activeFilterButton
			? document.querySelector(this.config.activeFilterButton)
			: this.buttons.querySelector(".filter-status__button_active");
		this.scrollerButton = this.config.buttonScrollerClassName
			? document.querySelector(this.config.buttonScrollerClassName)
			: this.buttons.querySelector(".filter-status__button-scroller");

		this.updateScrollerSize();
		this.windowOnResize();
		this.changeActiveBtn();
		this.changeScrollerPos();
	}

	getActiveButtonPosX() {
		return this.activeFilterButton.offsetLeft;
	}

	changeScrollerPos() {
		this.scrollerButton.style.transform = `translateX(${this.getActiveButtonPosX()}px)`;
	}

	windowOnResize() {
		window.addEventListener("resize", () => {
			this.updateScrollerSize();
			this.changeScrollerPos();
		});
	}

	updateScrollerSize() {
		const actualWidth = this.activeFilterButton.clientWidth;
		const actualHeight = this.activeFilterButton.clientHeight;
		this.scrollerButton.style.width = actualWidth + "px";
		this.scrollerButton.style.height = actualHeight + "px";
	}

	changeActiveBtn() {
		const btns = this.filterButton;
		Array.from(this.filterButton).forEach((btn) => {
			btn.addEventListener("click", () => {
				btns.forEach((item) =>
					item.classList.remove("filter-status__button_active")
				);
				btn.classList.add("filter-status__button_active");
				this.activeFilterButton = btn;
				this.updateScrollerSize();
				this.changeScrollerPos();
			});
		});
	}
}

// * Class for toggle header menu dropdowns
class headerMenuDropdowns {
	constructor() {
		this.headerMenuItems = ".header-bottom__menu_dropshow";
		this.headerMenuDropdowns = ".header-bottom__dropmenu";
		this.fixedBackground = ".fixed-background";
		this.activeMenuItemClass = "header-bottom__menu_active";
		this.showDropClass = "header-bottom__dropmenu_show";
		this.activeDropClass = "header-bottom__dropmenu_active";
		this.fixedBackgroundShown = "fixed-background_shown";
		this.fixedBackgroundActive = "fixed-background_active";
		this.fixedBackground = document.querySelector(".fixed-background");
		this.dropAlignRight = "header-bottom__dropmenu_right";

		this.headerBottomMenuTimer = null;
		this.headerBottomMenuTimer2 = null;
		this.fixedBackgroundTimer = null;

		this._addEventListener(
			document.querySelectorAll(this.headerMenuItems),
			"mouseenter",
			this.showDropdown,
			this
		);
		this._addEventListener(
			document.querySelectorAll(this.headerMenuItems),
			"mouseleave",
			this.hideDropdowns,
			this
		);
	}

	_addEventListener(elements, event, callback, _this) {
		let bindCallback = null;
		_this !== false
			? (bindCallback = callback.bind(_this))
			: (bindCallback = callback);

		elements.forEach((element) => {
			element.addEventListener(event, bindCallback);
		});
	}

	hideDropdowns(e) {
		const _this = this;
		const headerMenuItems = document.querySelectorAll(this.headerMenuItems);

		headerMenuItems.forEach((item) => {
			const dropdown = item.querySelector(this.headerMenuDropdowns);
			if (e.currentTarget === item) {
				item.classList.remove(_this.activeMenuItemClass);

				dropdown.classList.remove(_this.activeDropClass);
				_this.headerBottomMenuTimer2 = setTimeout(() => {
					dropdown.classList.remove(_this.showDropClass);
					dropdown.classList.remove(_this.dropAlignRight);
				}, 299);
			}
		});

		_this.fixedBackground.classList.remove(_this.fixedBackgroundActive);
		_this.fixedBackgroundTimer = setTimeout(() => {
			_this.fixedBackground.classList.remove(_this.fixedBackgroundShown);
		}, 300);
	}

	showDropdown(e) {
		const _this = this;
		const element = e.currentTarget;
		const dropdownItem = element.querySelector(_this.headerMenuDropdowns);
		let dropPosition = null;
		clearTimeout(_this.headerBottomMenuTimer2);

		element.classList.add(_this.activeMenuItemClass);
		dropdownItem.classList.add(_this.showDropClass);

		dropPosition = dropdownItem.getBoundingClientRect();
		if (dropPosition.right > window.innerWidth)
			dropdownItem.classList.add(_this.dropAlignRight);

		setTimeout(() => {
			dropdownItem.classList.add(_this.activeDropClass);
		}, 1);

		clearTimeout(_this.fixedBackgroundTimer);
		_this.fixedBackground.classList.add(_this.fixedBackgroundShown);
		_this.fixedBackground.classList.add(_this.fixedBackgroundActive);
	}
}

class mobileMenu {
	constructor() {
		this.mobileMenuElement = document.querySelector(".menumobile");
		this.mobileMenuToggleBtn = document.querySelector(".header-bottom__burger");
		this.mobileMenuShownClass = "menumobile_shown";
		this.mobileMenuActiveClass = "menumobile_active";
		this.mobileMenuToggleBtnActive = "header-bottom__burger_close";
		this.mobileMenuAdditinalOpen = ".menumobile-open";
		this.mobileMenuAdditinal = ".menumobile-additional";
		this.mobileMenuAdditinalActive = "menumobile-additional_active";
		this.mobileMenuAdditinalWrap = ".menumobile-additional__wrap";
		this.mobileMenuAdditinalWrapShown = "menumobile-additional__wrap_shown";
		this.mobileMenuAdditinalWrapActive = "menumobile-additional__wrap_active";
		this.mobileMenuAdditinalClose = ".menumobile-return";
		this.animationTime = 300;
		this.animationClearTimer1 = null;
		this.animationClearTimer2 = null;
		this.animationClearTimer3 = null;
		this._addEventListener("click");
		this._windowOnResize();
		this.showAdditionalMenu();
		this.hideAdditionalMenuListener();
	}

	toggleMenu() {
		if (this.mobileMenuElement.classList.contains(this.mobileMenuActiveClass)) {
			this.hideMenu();
		} else {
			this.mobileMenuToggleBtn.classList.add(this.mobileMenuToggleBtnActive);
			this.mobileMenuElement.classList.add(this.mobileMenuShownClass);
			clearTimeout(this.animationClearTimer1);
			this.animationClearTimer2 = setTimeout(() => {
				this.mobileMenuElement.classList.add(this.mobileMenuActiveClass);
			}, 0);
		}
	}

	hideMenu() {
		this.mobileMenuElement.classList.remove(this.mobileMenuActiveClass);
		this.mobileMenuToggleBtn.classList.remove(this.mobileMenuToggleBtnActive);
		clearTimeout(this.animationClearTimer2);
		this.animationClearTimer1 = setTimeout(() => {
			this.mobileMenuElement.classList.remove(this.mobileMenuShownClass);
		}, this.animationTime);

		this.hideAdditionalMenu();
	}

	_addEventListener(event) {
		this.mobileMenuToggleBtn.addEventListener(event, () => {
			this.toggleMenu();
		});
	}

	showAdditionalMenu() {
		const _this = this;
		const allOpenButtons = document.querySelectorAll(
			this.mobileMenuAdditinalOpen
		);
		allOpenButtons.forEach((openBtn, i) => {
			openBtn.addEventListener("click", function (e) {
				const id = i;
				const additionalElement = document.querySelector(
					_this.mobileMenuAdditinal
				);
				const additionalElementWrap = document.querySelectorAll(
					_this.mobileMenuAdditinalWrap
				)[id];

				if (
					!additionalElement.classList.contains(_this.mobileMenuAdditinalActive)
				) {
					additionalElement.classList.add(_this.mobileMenuAdditinalActive);

					clearTimeout(_this.animationClearTimer3);
					additionalElementWrap.classList.add(
						_this.mobileMenuAdditinalWrapShown
					);
					setTimeout(() => {
						additionalElementWrap.classList.add(
							_this.mobileMenuAdditinalWrapActive
						);
					}, 0);
				}
			});
		});
	}

	hideAdditionalMenuListener() {
		const _this = this;
		const allCloseButtons = document.querySelectorAll(
			this.mobileMenuAdditinalClose
		);

		allCloseButtons.forEach((closeBtn) => {
			closeBtn.addEventListener("click", function (e) {
				const additionalElement = document.querySelector(
					_this.mobileMenuAdditinal
				);
				const additionalElementWrap = document.querySelectorAll(
					_this.mobileMenuAdditinalWrap
				);

				additionalElement.classList.remove(_this.mobileMenuAdditinalActive);
				additionalElementWrap.forEach((wrap) => {
					wrap.classList.remove(_this.mobileMenuAdditinalWrapActive);

					_this.animationClearTimer3 = setTimeout(() => {
						wrap.classList.remove(_this.mobileMenuAdditinalWrapShown);
					}, this.animationTime);
				});
			});
		});
	}

	hideAdditionalMenu() {
		const _this = this;

		const additionalElement = document.querySelector(_this.mobileMenuAdditinal);
		const additionalElementWrap = document.querySelectorAll(
			_this.mobileMenuAdditinalWrap
		);

		additionalElement.classList.remove(_this.mobileMenuAdditinalActive);
		additionalElementWrap.forEach((wrap) => {
			wrap.classList.remove(_this.mobileMenuAdditinalWrapActive);

			_this.animationClearTimer3 = setTimeout(() => {
				wrap.classList.remove(_this.mobileMenuAdditinalWrapShown);
			}, this.animationTime);
		});
	}

	_windowOnResize() {
		window.addEventListener("resize", () => {
			if (window.innerWidth > 1000) {
				this.hideMenu();
			}
		});
	}
}

// class InitCustomSelect {
// 	constructor(element) {
// 		this.wrap = element;
// 		this.head = element.querySelector(".custom-select__head");
// 		this.dropdown = element.querySelector(".custom-select__dropdown");
// 		this.type = element.getAttribute("data-type");
// 		this.animationTime = 300;
// 		this.dropdownClass = this.dropdown.className
// 			.split(" ")
// 			.filter((cl) => (cl === "custom-select__dropdown" ? cl : ""))
// 			.join("");

// 		this.item = "custom-select__item";

// 		this.valueElements = {
// 			hiddenValue: element.querySelector(".custom-select__value-hidden"),
// 			visibleValue: element.querySelector(".custom-select__value-visible"),
// 		};
// 		this.selectClasses = {
// 			valueSelected: "custom-select_selected",
// 			outOfSelect: "custom-select__head_limit",
// 		};
// 		this.dropClasses = {
// 			dropdownShow: "custom-select__dropdown_shown",
// 			dropdownActive: "custom-select__dropdown_active",
// 			itemSelected: "custom-select__item_selected",
// 		};
// 		this.timers = {
// 			hideDropdownTimer: null,
// 		};

// 		this._addEventListener(this.head, "click", this.showDropdown, this);
// 		this._addEventListener(this.head, "click", this.hideDropdown, this);

// 		this._addEventListener(
// 			this.dropdown,
// 			"click",
// 			this.checkTypeOfSelect,
// 			this
// 		);

// 		this._addEventListener(document, "mouseup", this.outOfSelectClick, this);
// 	}

// 	_addEventListener(element, event, handler, _bind = null) {
// 		if (_bind !== null) handler = handler.bind(_bind);
// 		element.addEventListener(event, handler);
// 	}

// 	// * Shows a select dropdown list
// 	showDropdown(e) {
// 		if (!this.dropdown.classList.contains("vertical-scroll"))
// 			this.dropdown.classList.add("vertical-scroll");

// 		if (!this.dropdown.classList.contains(this.dropClasses.dropdownActive)) {
// 			this.hideDropdowns();
// 			this.dropdown.classList.add(this.dropClasses.dropdownShow);
// 			clearTimeout(this.timers.hideDropdownTimer);
// 			setTimeout(() => {
// 				this.dropdown.classList.add(this.dropClasses.dropdownActive);
// 			}, 0);
// 		}
// 	}

// 	// * Hides an open dropdown list
// 	hideDropdown() {
// 		if (this.dropdown.classList.contains(this.dropClasses.dropdownActive)) {
// 			this.dropdown.classList.remove(this.dropClasses.dropdownActive);
// 			this.timers.hideDropdownTimer = setTimeout(() => {
// 				this.dropdown.classList.remove(this.dropClasses.dropdownShow);
// 			}, this.animationTime);
// 		}
// 	}

// 	// * Hides all open dropdown lists
// 	hideDropdowns() {
// 		Array.from(document.getElementsByClassName(this.dropdownClass)).forEach(
// 			(item) => {
// 				item.classList.remove(this.dropClasses.dropdownShow);
// 				item.classList.remove(this.dropClasses.dropdownActive);
// 			}
// 		);
// 	}

// 	// * Executes a function depending on the select type
// 	checkTypeOfSelect(e) {
// 		if (this.type === "multiple") {
// 			this.multipleItemSelect(e);
// 		} else if (this.type === "single") {
// 			this.singleItemSelect(e);
// 		}
// 	}

// 	// * Selecting an element for a single select
// 	singleItemSelect(e) {
// 		const item = e.target.classList.contains(this.item)
// 			? e.target
// 			: e.target.closest(`.${this.item}`)
// 			? e.target.closest(`.${this.item}`)
// 			: null;
// 		if (item !== null) {
// 			this.value = item.getAttribute("data-value");
// 			this.wrap.classList.add(this.selectClasses.valueSelected);
// 			this.valueElements.hiddenValue.value = this.value;
// 			this.valueElements.visibleValue.innerText = this.value;
// 			item.classList.add(this.dropClasses.itemSelected);
// 			this.hideDropdown();
// 		}
// 	}

// 	// * Selecting an element for a multiple select
// 	multipleItemSelect(e) {
// 		const item = e.target.classList.contains(this.item)
// 			? e.target
// 			: e.target.closest(`.${this.item}`)
// 			? e.target.closest(`.${this.item}`)
// 			: null;
// 		if (item !== null) {
// 			this.value = [];
// 			this.value.length == 0;
// 			this.wrap.classList.add(this.selectClasses.valueSelected);

// 			if (item.classList.contains(this.dropClasses.itemSelected)) {
// 				item.classList.remove(this.dropClasses.itemSelected);
// 			} else {
// 				item.classList.add(this.dropClasses.itemSelected);
// 			}

// 			Array.from(
// 				this.dropdown.getElementsByClassName(this.dropClasses.itemSelected)
// 			).forEach((selected) => {
// 				this.value.push(selected.getAttribute("data-value"));
// 				selected.classList.add(this.dropClasses.itemSelected);
// 			});

// 			this.valueElements.hiddenValue.value = this.value.join(", ");
// 			this.valueElements.visibleValue.innerText = this.value.join(", ");

// 			if (
// 				this.valueElements.visibleValue.offsetWidth + 70 >
// 				this.wrap.offsetWidth
// 			) {
// 				this.head.classList.add(this.selectClasses.outOfSelect);
// 			} else {
// 				this.head.classList.remove(this.selectClasses.outOfSelect);
// 			}

// 			if (!this.value.length) {
// 				this.wrap.classList.remove(this.selectClasses.valueSelected);
// 			}
// 		}
// 	}

// 	outOfSelectClick(e) {
// 		if (!e.target.closest(".custom-select")) this.hideDropdowns();
// 	}
// }

class InitCustomSelect {
	constructor(element) {
		this.wrap = element;
		this.head = element.querySelector(".custom-select__head");
		this.dropdown = element.querySelector(".custom-select__dropdown");
		this.type = element.getAttribute("data-type");
		this.animationTime = 300;
		this.dropdownClass = this.dropdown.className
			.split(" ")
			.filter((cl) => (cl === "custom-select__dropdown" ? cl : ""))
			.join("");

		this.option = {
			CLASS: "custom-select__item",
			multipleClass: "custom-select__checkbox",
			selectedClass: "custom-select__item_selected",
		};
		this.currentValue = null;

		this.values = Array.from(
			this.dropdown.getElementsByClassName(this.option.CLASS)
		).map((item, i) => {
			item.setAttribute("data-id", i);
			return item.getAttribute("data-value");
		});

		this.valueElements = {
			hiddenValue: element.querySelector(".custom-select__value-hidden"),
			visibleValue: element.querySelector(".custom-select__value-visible"),
		};

		this.selectClasses = {
			valueSelected: "custom-select_selected",
			outOfSelect: "custom-select__head_limit",
			dropShown: "custom-select__drop-shown",
			dropRevers: "custom-select__drop-revers",
		};

		this.dropClasses = {
			dropdownShow: "custom-select__dropdown_shown",
			dropdownActive: "custom-select__dropdown_active",
		};

		this.timers = {
			hideDropdownTimer: null,
		};
		if (
			this.valueElements.hiddenValue.getAttribute("data-declension") !== null
		) {
			this.wordDeclensionText = this.valueElements.hiddenValue
				.getAttribute("data-declension")
				.split(",");
		}
		this.inputPlaceholder =
			this.valueElements.hiddenValue.getAttribute("data-placeholder");

		this._addEventListener(this.head, "click", this.showDropdown, this);
		this._addEventListener(this.head, "click", this.hideDropdown, this);

		this._addEventListener(
			this.dropdown,
			"click",
			this.checkTypeOfSelect,
			this
		);
		this._addEventListener(document, "mouseup", this.outOfSelectClick, this);
		element.customSelect = this;
	}

	_addEventListener(element, event, handler, _bind = null) {
		if (_bind !== null) handler = handler.bind(_bind);
		element.addEventListener(event, handler);
	}

	// * Shows a select dropdown list
	showDropdown(e) {
		if (!this.dropdown.classList.contains("vertical-scroll"))
			this.dropdown.classList.add("vertical-scroll");

		if (!this.dropdown.classList.contains(this.dropClasses.dropdownActive)) {
			this.hideDropdowns();
			this.dropdown.classList.add(this.dropClasses.dropdownShow);
			this.wrap.classList.add(this.selectClasses.dropShown);
			clearTimeout(this.timers.hideDropdownTimer);

			if (
				this.dropdown.getBoundingClientRect().top +
					this.dropdown.getBoundingClientRect().height >
				window.scrollY + window.innerHeight
			) {
				this.wrap.classList.add(this.selectClasses.dropRevers);
			}

			setTimeout(() => {
				this.dropdown.classList.add(this.dropClasses.dropdownActive);
			}, 0);
		}
	}

	// * Hides an open dropdown list
	hideDropdown() {
		if (this.dropdown.classList.contains(this.dropClasses.dropdownActive)) {
			this.dropdown.classList.remove(this.dropClasses.dropdownActive);
			this.wrap.classList.remove(this.selectClasses.dropShown);
			this.timers.hideDropdownTimer = setTimeout(() => {
				this.wrap.classList.remove(this.selectClasses.dropRevers);
				this.dropdown.classList.remove(this.dropClasses.dropdownShow);
			}, this.animationTime);
		}
	}

	// * Hides all open dropdown lists
	hideDropdowns() {
		Array.from(document.getElementsByClassName(this.dropdownClass)).forEach(
			(item) => {
				item.classList.remove(this.dropClasses.dropdownShow);
				item.classList.remove(this.dropClasses.dropdownActive);
			}
		);
		Array.from(
			document.getElementsByClassName(this.selectClasses.dropRevers)
		).forEach((item) => {
			item.classList.remove(this.selectClasses.dropRevers);
		});
		Array.from(
			document.getElementsByClassName(this.selectClasses.dropShown)
		).forEach((item) => {
			item.classList.remove(this.selectClasses.dropShown);
		});
	}

	// * Executes a function depending on the select type
	checkTypeOfSelect(e) {
		e.stopPropagation();
		if (this.type === "multiple") {
			this.multipleItemSelect(e);
		} else if (this.type === "single") {
			this.singleItemSelect(e);
		}
	}

	// * Selecting an element for a single select
	singleItemSelect(e) {
		const item = e.target.classList.contains(this.option.CLASS)
			? e.target
			: e.target.closest(`.${this.option.CLASS}`)
			? e.target.closest(`.${this.option.CLASS}`)
			: null;
		if (item !== null) {
			this.currentValue = item.getAttribute("data-value");
			this.wrap.classList.add(this.selectClasses.valueSelected);
			this.valueElements.hiddenValue.value = this.currentValue;
			this.valueElements.visibleValue.innerText = this.currentValue;
			item.classList.add(this.option.selectedClass);
			this.hideDropdown();
		}
	}

	// * Selecting an element for a multiple select
	multipleItemSelect(e) {
		const item = e.target.classList.contains(this.option.CLASS)
			? e.target
			: e.target.closest(`.${this.option.CLASS}`)
			? e.target.closest(`.${this.option.CLASS}`)
			: null;
		if (item !== null) {
			this.currentValue = [];
			this.currentValue.length == 0;
			this.wrap.classList.add(this.selectClasses.valueSelected);

			if (item.classList.contains(this.option.selectedClass)) {
				item.classList.remove(this.option.selectedClass);
			} else {
				item.classList.add(this.option.selectedClass);
			}

			Array.from(
				this.dropdown.getElementsByClassName(this.option.selectedClass)
			).forEach((selected) => {
				this.currentValue.push({
					value: selected.getAttribute("data-value"),
					id: Number(selected.getAttribute("data-id")),
				});
				selected.classList.add(this.option.selectedClass);
			});

			this.valueElements.hiddenValue.value = this.currentValue
				.map((value) => {
					return value.value;
				})
				.join(", ");

			this.valueElements.visibleValue.innerText = this.currentValue
				.map((value) => {
					return value.value;
				})
				.join(", ");

			if (
				this.valueElements.visibleValue.offsetWidth + 70 >
				this.wrap.offsetWidth
			) {
				this.head.classList.add(this.selectClasses.outOfSelect);
			} else {
				this.head.classList.remove(this.selectClasses.outOfSelect);
			}

			if (!this.currentValue.length) {
				this.wrap.classList.remove(this.selectClasses.valueSelected);
			}
		}
	}

	outOfSelectClick(e) {
		if (!e.target.closest(".custom-select")) this.hideDropdowns();
	}

	appendOption(value, text = "") {
		const option = document.createElement("div");
		option.classList.add(this.option.CLASS);
		if (this.type === "multiple")
			option.classList.add(this.option.multipleClass);
		option.setAttribute("data-value", value);
		if (text.length > 0) {
			option.setAttribute("title", text);
			option.textContent = text;
		} else {
			option.setAttribute("title", value);
			option.textContent = value;
		}
		this.values.push(value);
		option.setAttribute("data-id", this.values.length - 1);

		this.dropdown.append(option);
	}

	refreshOptions(values) {
		const _this = this;
		this.currentValue = null;
		this.values.length = 0;
		Array.from(this.dropdown.getElementsByClassName(this.option.CLASS)).forEach(
			(option) => {
				option.remove();
			}
		);

		values.forEach((value) => {
			_this.appendOption(value);
		});
	}

	wordDeclension(totalCount, texts) {
		if (typeof texts !== "object") throw new Error("Ожидается массив данных");
		if (texts.length < 3) throw new Error("Ожидается 3 элемента");
		let sidebarCountText = "";
		// * Для склонения слова "товар" в зависимости от количества
		switch (totalCount % 10) {
			case 1:
				sidebarCountText = `${totalCount} ${texts[0]}`;
				break;
			case 2:
			case 3:
			case 4:
				sidebarCountText = `${totalCount} ${texts[1]}`;
				break;
			case 0:
			case 5:
			case 6:
			case 7:
			case 8:
			case 9:
				sidebarCountText = `${totalCount} ${texts[2]}`;
				break;
		}
		// * Исключение для некоторых чисел
		if ([11, 12, 13, 14, 15].includes(totalCount)) {
			sidebarCountText = `${totalCount} ${texts[2]}`;
		}
		return sidebarCountText;
	}

	updatePlaceholder(number) {
		if (!this.wordDeclensionText.length) return;
		if (number > 0) {
			const wordDeclensionTextValue = this.wordDeclension(
				number,
				this.wordDeclensionText
			);
			this.valueElements.visibleValue.innerText = wordDeclensionTextValue;
		} else {
			this.valueElements.visibleValue.innerText = this.inputPlaceholder;
		}
	}

	updateValues(newValues = null) {
		if (newValues !== null) {
			this.currentValue = newValues;
			return;
		}

		this.currentValue = this.dropdown
			.getElementsByClassName(this.option.CLASS)
			.map((item) => {
				return item.getAttribute("data-value");
			});
	}

	update() {
		this.updateValues();
		this.updatePlaceholder(0);
	}
}

// * Append map script to head
function lazyMapScript() {
	const yandexConfig = {
		yandexMapId: "6045d508-a8a5-49bf-be37-1b08c6e75dbd",
		yandexMapLanguage: "ru_RU",
		yandexMapScriptType: "text/javascript",
	};

	const yandexMapScript = document.createElement("script");
	const yandexMapLink = `https://api-maps.yandex.ru/2.1/?apikey=${yandexConfig.yandexMapId}&lang=${yandexConfig.yandexMapLanguage}`;
	yandexMapScript.src = yandexMapLink;
	yandexMapScript.type = yandexConfig.yandexMapScriptType;

	document.head.appendChild(yandexMapScript);
}

// * Toggle header top dropdown
function toggleHeaderTopDropdown() {
	const element = $(".header-top__dropdown");
	const showClass = "header-top__dropdown_show";
	const activeClass = "header-top__dropdown_active";
	const animationTime = 300;

	if (!element.hasClass(activeClass)) {
		element.addClass(showClass);
		setTimeout(() => {
			element.addClass(activeClass);
		}, 0);
	} else {
		element.removeClass(activeClass);
		setTimeout(() => {
			element.removeClass(showClass);
		}, animationTime);
	}
}

// * Toggle catalog sidebar
function toggleCatalogSidebar() {
	const sidebar = $(".catalog-sidebar");
	if (sidebar.hasClass("active")) {
		hideCatalogSidebar();
	} else {
		showCatalogSidebar();
	}
}

// * Show catalog sidebar
function showCatalogSidebar() {
	const sidebar = $(".catalog-sidebar");
	const sidebarCont = sidebar.find(".catalog-sidebar__wrap");
	sidebar.fadeIn(300).addClass("active");
	sidebarCont.addClass("active");
	bodyFixed();
}

// * Hide catalog sidebar
function hideCatalogSidebar() {
	const sidebar = $(".catalog-sidebar");
	const sidebarCont = sidebar.find(".catalog-sidebar__wrap");

	if (window.innerWidth < 1200) {
		sidebar.fadeOut(300).removeClass("active");
	} else {
		sidebar.removeClass("active");
	}
	sidebarCont.removeClass("active");
	setTimeout(function () {
		clearStyle(sidebar);
	}, 300);
	removeFixed();
}

// * Returns numbers in fractional or integer form
function onlyNumber(val, type = "int") {
	if (type === "int") {
		return parseInt(val.toString().replace(/\D/g, ""));
	} else if (type === "float") {
		return parseFloat(val.toString().replace(/[^\d.]/g, ""));
	}
}

// * Dividing numbers by thousandths
function numberSeparation(val) {
	let part1 = Math.floor(val.toString().replace(/[^\d.]/g, "") * 100) / 100;
	return part1.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
}

// * Init range slider function
function initCustomRange() {
	const rangeWrapEl = ".custom-range";
	const rangeMinEl = ".custom-range__min";
	const rangeMaxEl = ".custom-range__max";
	const rangeLine = ".custom-range__line";

	// * Init all range sliders
	$(rangeLine).each(function () {
		const _this = $(this);
		const _thisSliderMinEl = _this.closest(rangeWrapEl).find(rangeMinEl);
		const _thisSliderDataMin = _this.attr("data-min");
		const _thisSliderMaxEl = _this.closest(rangeWrapEl).find(rangeMaxEl);
		const _thisSliderDataMax = _this.attr("data-max");

		$(this).ionRangeSlider({
			type: "double",
			min: onlyNumber(_thisSliderDataMin),
			max: onlyNumber(_thisSliderDataMax),
			from: 0,
			onChange: function (data) {
				const sliderChangeMin = data.from_pretty;
				const sliderChangeMax = data.to_pretty;
				_thisSliderMinEl.val(sliderChangeMin);
				_thisSliderMaxEl.val(sliderChangeMax);
			},
		});
	});

	// * If the value of the minimum field is greater than the value of the maximum value, the value of the minimum value is set to the value of the maximum field
	$(rangeWrapEl).on("change input", rangeMinEl, function () {
		const element = $(this);
		const wrap = element.closest(rangeWrapEl);
		const value = element.val();
		const pretty = onlyNumber(value);
		const maxValue = onlyNumber(wrap.find(rangeLine).attr("data-max"));
		const sliderInstance = wrap.find(rangeLine).data("ionRangeSlider");
		if (pretty > maxValue) {
			element.val(numberSeparation(maxValue));
			sliderInstance.update({
				from: maxValue,
			});
		} else {
			element.val(numberSeparation(pretty));
			sliderInstance.update({
				from: pretty,
			});
		}
	});

	// *
	$(rangeWrapEl).on("blur", rangeMinEl, function () {
		const element = $(this);
		const value = element.val();
		const pretty = onlyNumber(value);
		const wrap = element.closest(rangeWrapEl);
		const maxValueEl = wrap.find(rangeMaxEl);
		const maxValue = maxValueEl.val();
		const prettyMaxValue = onlyNumber(maxValue);

		if (pretty > prettyMaxValue) element.val(numberSeparation(prettyMaxValue));

		if (!element.val()) element.val(0);
	});

	// * If the value of the maximum field is less than the value of the minimum value field, the value of the maximum value is set equal to the value of the minimum field
	$(rangeWrapEl).on("change input", rangeMaxEl, function () {
		const element = $(this);
		const wrap = element.closest(rangeWrapEl);
		const value = element.val();
		const pretty = onlyNumber(value);
		const maxValue = onlyNumber(wrap.find(rangeLine).attr("data-max"));
		const sliderInstance = wrap.find(rangeLine).data("ionRangeSlider");
		if (pretty > maxValue) {
			element.val(numberSeparation(maxValue));
			sliderInstance.update({
				to: maxValue,
			});
		} else {
			element.val(numberSeparation(pretty));
			sliderInstance.update({
				to: pretty,
			});
		}
	});

	$(rangeWrapEl).on("blur", rangeMaxEl, function () {
		const element = $(this);
		const wrap = element.closest(rangeWrapEl);
		const maxValue = wrap.find(rangeLine).attr("data-max");
		const minValueEl = wrap.find(rangeMinEl);
		const minValue = minValueEl.val();
		const pretty = onlyNumber(element.val());
		const prettyMinValue = onlyNumber(minValue);
		const prettyMaxValue = onlyNumber(maxValue);
		if (pretty < prettyMinValue) element.val(numberSeparation(prettyMinValue));
		if (!element.val()) element.val(numberSeparation(prettyMaxValue));
	});
}

// * Function for update range slider max and min value
function updateRangeSliderMinMax() {
	const rangeLine = ".custom-range__line";

	$(rangeLine).each(function () {
		const _this = $(this);
		const _rangeMaxValue = _this.attr("data-max");
		const _rangeMinValue = _this.attr("data-min");
		const _rangSliderInstance = _this.data("ionRangeSlider");

		_rangSliderInstance.update({
			max: onlyNumber(_rangeMaxValue),
			min: onlyNumber(_rangeMinValue),
		});
	});
}

initCustomRange();

// * Calculates the width of the scrollbar
function scrollWidth() {
	const div = document.createElement("div");
	div.style.height = "50px";
	div.style.width = "50px";
	div.style.overflowY = "scroll";
	document.body.appendChild(div);
	const scrollWidth = div.offsetWidth - div.clientWidth;
	div.remove();
	return scrollWidth;
}

// * Remove scroll on page
function bodyFixed() {
	$("body, .wrapper").addClass("no-scroll");

	$("body, .product-fixed").css({
		"padding-right": scrollWidth() + "px",
	});
}

// * Return scroll on page
function removeFixed() {
	$("body, .wrapper").removeClass("no-scroll");
	$("body, .product-fixed").removeAttr("style");
}

// * Fixed info block on product card page
function productFixed() {
	let far = false;
	let timer = null;
	const CLASS = {
		active: "product-fixed_active",
		show: "product-fixed_shown",
	};
	const element = $(".product-fixed");
	return function () {
		const scrollTop = $(window).scrollTop();

		if (window.innerWidth < 1000) {
			element.removeClass(CLASS.active);
			timer = setTimeout(() => {
				far = false;
				element.removeClass(CLASS.show);
			}, 300);
			return;
		}
		if (!element.length) return;

		if (scrollTop > 135 && !far) {
			far = true;
			clearTimeout(timer);
			element.addClass(CLASS.show);
			setTimeout(function () {
				element.addClass(CLASS.active);
			}, 1);
		} else if (scrollTop < 135 && far) {
			element.removeClass(CLASS.active);
			timer = setTimeout(() => {
				element.removeClass(CLASS.show);
			}, 300);
			far = false;
		}
	};
}

const execProductFixed = productFixed();

// * Makes placeholders active if the value is not empty
function changeInputPlaceholder() {
	$(".custom-input").each(function () {
		if ($(this).val()) $(this).addClass("custom-input_active");
	});
}

changeInputPlaceholder();

// * Function for queries
function ajaxPost(url, data, headers = {}, params = {}) {
	return fetch(url, {
		method: "POST",
		body: data,
		headers: headers,
		...params,
	});
}

// * The function of adding a loader to the button
function addBtnLoader(btn) {
	btn
		.attr("disabled", "disabled")
		.css("width", btn.outerWidth() + "px")
		.css("height", btn.outerHeight() + "px")
		.html(
			'<div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>'
		);
}

// * The function of removing the loader from the button
function removeBtnLoader(btn, btnOld) {
	btn.removeAttr("disabled").removeAttr("style").html(btnOld);
}

// * Adds error messages
function addErrorMessage(params) {
	const message = params["message"] ? params["message"] : null;
	const element = params["element"] ? params["element"] : null;
	const position = params["position"] ? params["position"] : "top";
	const className = params["className"] ? params["className"] : null;

	const error = document.createElement("div");
	error.className = "error";
	className !== null ? error.classList.add(className) : null;
	error.textContent = message !== null ? message : "Ошибка";
	if (element === null || element === undefined || element === "undefined")
		throw "Не указан элемент";
	switch (position) {
		case "top":
			element.before(error);
			break;
		case "bottom":
			element.after(error);
			break;
		case "inner":
			element.append(error);
			break;
	}
}
